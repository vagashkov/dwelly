from django.contrib.auth import get_user_model
from django.shortcuts import reverse
from django.test import TestCase

from rest_framework.status import (
    HTTP_200_OK,
    HTTP_201_CREATED,
    HTTP_403_FORBIDDEN,
    HTTP_422_UNPROCESSABLE_ENTITY
)

from tests.data import good_user

from ....constants import ERROR_WRONG_CONTACT_TYPE_ID
from ....models import UserMessage, ContactType
from ....tests import company_contact_type, user_messages

User = get_user_model()


class CompanyContactsTest(TestCase):
    """
    Testing company contacts listing and creation
    """

    def setUp(self) -> None:
        """
        Pre-create some object(s)
        :return:
        """
        self.contact_type = ContactType.objects.create(
            **company_contact_type
        )

    def test_create_message_no_required_field(self) -> None:
        # Check if contact message can be created by without required field

        message_data = user_messages[0].copy()
        del message_data[UserMessage.Field.contact_type]

        for key in message_data:
            bad_data = message_data.copy()
            del bad_data[key]

            response = self.client.post(
                reverse("contacts:api_user_messages"),
                bad_data,
                content_type="application/json"
            )
            self.assertEqual(
                response.status_code,
                HTTP_422_UNPROCESSABLE_ENTITY
            )
            # Check if error was generated by the cause we are checking
            self.assertIn(
                key,
                response.data.get("errors")
                )
            self.assertIn(
                "Field required",
                response.data.get("errors").get(key)
            )

    def test_create_message_wrong_type(self) -> None:
        # Check if new message can be created with non-existing type

        bad_data = user_messages[0].copy()
        bad_data[UserMessage.Field.contact_type] = -999
        response = self.client.post(
            reverse("contacts:api_user_messages"),
            bad_data,
            content_type="application/json"
        )

        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )

        # Check if error was generated by the cause we are checking
        self.assertIn(
            UserMessage.Field.contact_type,
            response.data.get("errors")
        )
        self.assertTrue(
            [
                error for error
                in response.data.get("errors").get(
                    UserMessage.Field.contact_type
                )
                if ERROR_WRONG_CONTACT_TYPE_ID.format(-999) in error
            ]
        )

    def test_create_message(self) -> None:
        # Check if message can be created using correct data

        message_data = user_messages[0].copy()
        message_data[UserMessage.Field.contact_type] = self.contact_type.id

        response = self.client.post(
            reverse("contacts:api_user_messages"),
            message_data,
            content_type="application/json"
        )

        self.assertEqual(
            response.status_code,
            HTTP_201_CREATED
        )

        for key in message_data:
            self.assertEqual(
                response.data.get(key),
                message_data.get(key)
            )

    def test_get_messages_no_auth(self) -> None:
        # Checking if non-authenticated user can get user messages list
        response = self.client.get(
            reverse("contacts:api_user_messages")
        )

        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_get_messages_standard_user(self) -> None:
        # Checking if standard user can get user messages list

        self.client.force_login(
            User.objects.create_user(
                email=good_user.get(User.Field.email),
                password=good_user.get(User.Field.password)
            )
        )

        response = self.client.get(
            reverse("contacts:api_user_messages")
        )

        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_get_messages_as_admin(self) -> None:
        # Checking getting all user messages as admin user
        self.client.force_login(
            User.objects.create_superuser(
                email="admin{}".format(good_user.get(User.Field.email)),
                password=good_user.get(User.Field.password)
            )
        )

        contacts_list = user_messages.copy()
        for contact in contacts_list:
            contact_type, _ = ContactType.objects.get_or_create(
                name=contact.get(UserMessage.Field.contact_type)
            )
            contact[UserMessage.Field.contact_type] = contact_type.id
            UserMessage.objects.create(
                contact_type=contact_type,
                author=contact.get(UserMessage.Field.author),
                contact=contact.get(UserMessage.Field.contact),
                text=contact.get(UserMessage.Field.text)
            )

        response = self.client.get(
            reverse("contacts:api_user_messages")
        )

        self.assertEqual(
            response.status_code,
            HTTP_200_OK
        )

        # Comparing contacts list with test data
        self.assertListEqual(
            [
                {
                    UserMessage.Field.contact_type:
                        contact.get(UserMessage.Field.contact_type),
                    UserMessage.Field.author:
                        contact.get(UserMessage.Field.author),
                    UserMessage.Field.contact:
                        contact.get(UserMessage.Field.contact),
                    UserMessage.Field.text:
                        contact.get(UserMessage.Field.text),
                }
                for contact in contacts_list
            ],
            response.data.get("results")
        )
