from django.contrib.auth import get_user_model
from django.shortcuts import reverse
from django.test import TestCase

from rest_framework.status import (
    HTTP_200_OK,
    HTTP_201_CREATED,
    HTTP_204_NO_CONTENT,
    HTTP_403_FORBIDDEN,
    HTTP_422_UNPROCESSABLE_ENTITY
)

from core.models import BaseModel
from tests.data import good_user

from ....constants import (
    ERROR_NO_CONTACT_VALUE,
    ERROR_WRONG_CONTACT_TYPE_ID,
    ERROR_WRONG_COMPANY_ID
)
from ....models import Company, ContactType, CompanyContact
from ....tests import (
    company_data, company_contact_type, company_contacts
)

User = get_user_model()


class CompanyContactsTest(TestCase):
    """
    Testing company contacts listing and creation
    """

    def setUp(self) -> None:
        """
        Pre-create some user accounts
        :return:
        """
        self.standard_user = User.objects.create(
            email=good_user.get(User.Field.email),
            password=good_user.get(User.Field.password)
        )

        self.admin_user = User.objects.create_superuser(
            email="admin{}".format(good_user.get(User.Field.email)),
            password=good_user.get(User.Field.password)
        )

        self.company = Company.objects.create(**company_data)
        contact_type = ContactType.objects.create(**company_contact_type)

        self.contact_data = company_contacts[0].copy()
        self.contact_data[CompanyContact.Field.company] = self.company.id
        self.contact_data[CompanyContact.Field.contact_type] = contact_type.id

    def test_create_company_contact_no_auth(self) -> None:
        # Check if company contact can be created by non-authenticated user

        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            self.contact_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_create_company_contact_as_standard_user(self) -> None:
        # Check if company contact can be created by standard user
        self.client.force_login(self.standard_user)

        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            self.contact_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_create_company_contact_no_type(self) -> None:
        # Check if new contact can be created without type
        self.client.force_login(self.admin_user)

        bad_data = self.contact_data.copy()
        del bad_data[CompanyContact.Field.contact_type]
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            bad_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )
        # Check if error was generated by the cause we are currently checking
        self.assertIn(
            CompanyContact.Field.contact_type,
            response.data.get("errors")
        )
        self.assertIn(
            "Field required",
            response.data.get("errors").get(
                CompanyContact.Field.contact_type
            )
        )

    def test_create_company_contact_wrong_type(self) -> None:
        # Check if new contact can be created with non-existing type
        self.client.force_login(self.admin_user)

        bad_data = self.contact_data.copy()
        bad_data[CompanyContact.Field.contact_type] = -999
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            bad_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )
        # Check if error was generated by the cause we are currently checking
        self.assertIn(
            CompanyContact.Field.contact_type,
            response.data.get("errors")
        )
        self.assertTrue(
            [
                error for error
                in response.data.get("errors").get(
                    CompanyContact.Field.contact_type
                )
                if ERROR_WRONG_CONTACT_TYPE_ID.format(-999) in error
            ]
        )

    def test_create_company_contact_no_value(self) -> None:
        # Check if new contact can be created without value
        self.client.force_login(self.admin_user)

        bad_data = self.contact_data.copy()
        bad_data[CompanyContact.Field.value] = ""
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            bad_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )
        # Check if error was generated by the cause we are currently checking
        self.assertIn(
            CompanyContact.Field.value,
            response.data.get("errors")
        )
        self.assertTrue(
            [
                error for error
                in response.data.get("errors").get(CompanyContact.Field.value)
                if str(ERROR_NO_CONTACT_VALUE) in error
            ]
        )

    def test_create_company_contact_no_company(self) -> None:
        # Check if new contact can be created without company
        self.client.force_login(self.admin_user)

        bad_data = self.contact_data.copy()
        del bad_data[CompanyContact.Field.company]
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            bad_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )
        # Check if error was generated by the cause we are currently checking
        self.assertIn(
            CompanyContact.Field.company,
            response.data.get("errors")
        )
        self.assertIn(
            "Field required",
            response.data.get("errors").get(
                CompanyContact.Field.company
            )
        )

    def test_create_company_contact_wrong_company(self) -> None:
        # Check if new contact can be created with non-existing company
        self.client.force_login(self.admin_user)

        bad_data = self.contact_data.copy()
        bad_data[CompanyContact.Field.company] = -999
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            bad_data,
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_422_UNPROCESSABLE_ENTITY
        )

        # Check if error was generated by the cause we are currently checking
        self.assertIn(
            CompanyContact.Field.company,
            response.data.get("errors")
        )
        self.assertTrue(
            [
                error for error
                in response.data.get("errors").get(
                    CompanyContact.Field.company
                )
                if ERROR_WRONG_COMPANY_ID.format(-999) in error
            ]
        )

    def test_create_company_contact(self) -> None:
        # Check if company contact can be created by admin using correct data
        self.client.force_login(self.admin_user)
        response = self.client.post(
            reverse("contacts:api_company_contacts"),
            self.contact_data,
            content_type="application/json"
        )

        self.assertEqual(
            response.status_code,
            HTTP_201_CREATED
        )
        for key in self.contact_data:
            self.assertEqual(
                response.data.get(key),
                self.contact_data.get(key)
            )

    def test_get_company_contacts(self) -> None:
        # Checking getting all company contacts case
        contacts_list = company_contacts.copy()
        for contact in contacts_list:
            contact_type, _ = ContactType.objects.get_or_create(
                name=contact.get(CompanyContact.Field.contact_type)
            )
            contact[CompanyContact.Field.contact_type] = contact_type.id
            contact[CompanyContact.Field.company] = self.company.id
            CompanyContact.objects.create(
                contact_type=contact_type,
                value=contact.get(CompanyContact.Field.value),
                description=contact.get(CompanyContact.Field.description),
                company=self.company
            )

        response = self.client.get(
            reverse("contacts:api_company_contacts")
        )

        self.assertEqual(
            response.status_code,
            HTTP_200_OK
        )

        # Comparing company contacts list with test data
        self.assertListEqual(
            [
                {
                    CompanyContact.Field.contact_type:
                        contact.get(CompanyContact.Field.contact_type),
                    CompanyContact.Field.value:
                        contact.get(CompanyContact.Field.value),
                    CompanyContact.Field.description:
                        contact.get(CompanyContact.Field.description),
                    CompanyContact.Field.company:
                        contact.get(CompanyContact.Field.company),
                }
                for contact in contacts_list
            ],
            response.data.get("results")
        )


class CompanyContactDetailsTest(TestCase):
    """
    Testing single company contact endpoints
    """

    def setUp(self) -> None:
        """
        Pre-create some objects to test
        :return:
        """
        self.standard_user = User.objects.create(
            email=good_user.get(User.Field.email),
            password=good_user.get(User.Field.password)
        )

        self.admin_user = User.objects.create_superuser(
            email="admin{}".format(good_user.get(User.Field.email)),
            password=good_user.get(User.Field.password)
        )

        self.company = Company.objects.create(**company_data)
        self.contact_type = ContactType.objects.create(**company_contact_type)

        self.company_contact = CompanyContact.objects.create(
            contact_type=self.contact_type,
            value=company_contacts[0].get(
                CompanyContact.Field.value
            ),
            description=company_contacts[0].get(
                CompanyContact.Field.description
            ),
            company=self.company
        )

    def test_get_company_contact(self):
        """
        Getting company contact details without authentication
        :return:
        """

        response = self.client.get(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            )
        )
        self.assertEqual(
            response.status_code,
            HTTP_200_OK
            )
        self.assertEqual(
            response.data.get(CompanyContact.Field.contact_type),
            self.contact_type.id
        )
        self.assertEqual(
            response.data.get(CompanyContact.Field.company),
            self.company.id
        )
        self.assertEqual(
            response.data.get(CompanyContact.Field.value),
            company_contacts[0].get(CompanyContact.Field.value)
        )
        self.assertEqual(
            response.data.get(CompanyContact.Field.description),
            company_contacts[0].get(CompanyContact.Field.description)
        )

    def test_patch_company_contact_no_auth(self) -> None:
        # Check if company contact can be changed by non-authenticated user

        response = self.client.put(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            ),
            {},
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_patch_company_contact_standard_user(self) -> None:
        # Check if company contact can be changed by standard user
        self.client.force_login(self.standard_user)

        response = self.client.put(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            ),
            {},
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_delete_company_contact_no_auth(self) -> None:
        # Check if company contact can be deleted by non-authenticated user

        response = self.client.delete(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            )
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_delete_company_contact_standard_user(self) -> None:
        # Check if company contact can be deleted by standard user
        self.client.force_login(self.standard_user)

        response = self.client.put(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            )
        )
        self.assertEqual(
            response.status_code,
            HTTP_403_FORBIDDEN
        )

    def test_patch_company_contact_admin(self) -> None:
        # Check if company contact can be changed by admin
        self.client.force_login(self.admin_user)

        new_contact_type = ContactType.objects.create(
            name=company_contacts[1].get(
                CompanyContact.Field.contact_type
            )
        )

        response = self.client.patch(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            ),
            {
                CompanyContact.Field.contact_type: new_contact_type.id,
                CompanyContact.Field.value: company_contacts[1].get(
                    CompanyContact.Field.value
                ),
                CompanyContact.Field.description: company_contacts[1].get(
                    CompanyContact.Field.description
                )
            },
            content_type="application/json"
        )
        self.assertEqual(
            response.status_code,
            HTTP_200_OK
        )
        company_contact = CompanyContact.objects.get(
            id=self.company_contact.id
        )
        self.assertEqual(
            company_contact.value,
            company_contacts[1].get(CompanyContact.Field.value)
        )
        self.assertEqual(
            company_contact.description,
            company_contacts[1].get(CompanyContact.Field.description)
        )
        self.assertEqual(
            company_contact.contact_type.name,
            company_contacts[1].get(CompanyContact.Field.contact_type)
        )

    def test_delete_company_contact_admin(self) -> None:
        # Check if company contact can be deleted by admin
        self.client.force_login(self.admin_user)

        response = self.client.delete(
            reverse(
                "contacts:api_company_contact_details",
                kwargs={
                    BaseModel.Field.id: self.company_contact.id
                }
            )
        )
        self.assertEqual(
            response.status_code,
            HTTP_204_NO_CONTENT
        )
        self.assertEqual(
            CompanyContact.objects.all().count(),
            0
        )
